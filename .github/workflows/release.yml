name: Build and Release
on:
  push:
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.check_commit_msg.outputs.skip }}
    steps:
      - name: Check commit message
        id: check_commit_msg
        run: |
          if [[ "${{ github.event.head_commit.message }}" == rel* || "${{ github.event_name }}" == 'workflow_dispatch' ]]; then
            echo "skip=false" >> $GITHUB_OUTPUT
          else
            echo "Commit message does not start with 'rel', skipping build."
            echo "skip=true" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check
    if: needs.check.outputs.skip == 'false'
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        id: cp313
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          pip install --disable-pip-version-check --no-cache-dir -r requirements.txt

      - name: Package code and Python environment
        run: |
          # 清理并重新创建package目录
          if (Test-Path package) {
            Remove-Item package -Recurse -Force
          }
          mkdir package
          
          # 复制代码文件，排除特定目录和文件
          Get-ChildItem -Path . -Exclude @('package', '.git', '.github') | ForEach-Object {
            try {
              $destPath = Join-Path "package" $_.Name
              if ($_.PSIsContainer) {
                Copy-Item -Path $_.FullName -Destination $destPath -Recurse -Force -ErrorAction Stop
              } else {
                Copy-Item -Path $_.FullName -Destination $destPath -Force -ErrorAction Stop
              }
            } catch {
              Write-Warning "无法复制 $($_.FullName): $_"
            }
          }
          
          # 复制Python环境
          $PYTHON_PATH = "${{ steps.cp313.outputs.python-path }}"
          $PYTHON_DIR = Split-Path -Parent $PYTHON_PATH
          
          if (!(Test-Path "package\python_env")) {
            mkdir "package\python_env"
          }
          
          # 使用Robocopy替代xcopy
          robocopy "$PYTHON_DIR" "package\python_env" /E /NFL /NDL /NJH /NJS /nc /ns /np
          
          # 创建启动脚本
          @"
          @echo off
          python_env\python.exe main.py
          pause
          "@ | Out-File -FilePath "package\start.cmd" -Encoding ascii
          
          # 检查结果
          if (Test-Path "package\start.cmd") {
            Write-Host "Package creation completed successfully"
            exit 0
          } else {
            Write-Error "Package creation failed"
            exit 1
          }
      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: packaged-code
          path: package/

      - name: Clean up
        run: |
          rm package/  -Recurse -Force
          echo "Cleaned up build artifacts."

  release:
    needs: [check, build]
    if: needs.check.outputs.skip == 'false'
    runs-on: windows-latest
    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: packaged-code
          path: package/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: package/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}